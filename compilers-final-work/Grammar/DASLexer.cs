//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DAS.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class DASLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, OE=5, CE=6, OB=7, CB=8, AT=9, SEP=10, 
		PLUS=11, MINUS=12, MULT=13, DIV=14, AND=15, OR=16, NOT=17, EQ=18, LT=19, 
		GT=20, LE=21, GE=22, NE=23, BOOL_TRUE=24, BOL_FALSE=25, IF=26, WHILE=27, 
		DO=28, FOR=29, FUNCTION=30, RETURN=31, THEN=32, ELSE=33, WRITE=34, READ=35, 
		STR=36, EOL=37, NUM=38, VAR=39, COMMENT=40, WS=41;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "OE", "CE", "OB", "CB", "AT", "SEP", "PLUS", 
		"MINUS", "MULT", "DIV", "AND", "OR", "NOT", "EQ", "LT", "GT", "LE", "GE", 
		"NE", "BOOL_TRUE", "BOL_FALSE", "IF", "WHILE", "DO", "FOR", "FUNCTION", 
		"RETURN", "THEN", "ELSE", "WRITE", "READ", "STR", "EOL", "NUM", "VAR", 
		"COMMENT", "WS"
	};


	public DASLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DASLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'numero'", "'texto'", "'('", "')'", "'START'", "'END'", 
		"'='", "','", "'+'", "'-'", "'*'", "'/'", "'&&'", "'||'", "'!'", "'=='", 
		"'<'", "'>'", "'<='", "'>='", "'!='", "'true'", "'false'", null, null, 
		null, null, null, null, null, null, null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "OE", "CE", "OB", "CB", "AT", "SEP", "PLUS", 
		"MINUS", "MULT", "DIV", "AND", "OR", "NOT", "EQ", "LT", "GT", "LE", "GE", 
		"NE", "BOOL_TRUE", "BOL_FALSE", "IF", "WHILE", "DO", "FOR", "FUNCTION", 
		"RETURN", "THEN", "ELSE", "WRITE", "READ", "STR", "EOL", "NUM", "VAR", 
		"COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DAS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DASLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,41,263,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,1,0,1,0,1,1,1,1,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,
		6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,
		11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,
		17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,
		22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,
		25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,
		29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,
		33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,5,35,217,8,35,10,
		35,12,35,220,9,35,1,35,1,35,1,36,1,36,1,37,4,37,227,8,37,11,37,12,37,228,
		1,37,1,37,4,37,233,8,37,11,37,12,37,234,3,37,237,8,37,1,38,1,38,5,38,241,
		8,38,10,38,12,38,244,9,38,1,39,1,39,1,39,1,39,5,39,250,8,39,10,39,12,39,
		253,9,39,1,39,1,39,1,40,4,40,258,8,40,11,40,12,40,259,1,40,1,40,0,0,41,
		1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
		29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
		53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
		77,39,79,40,81,41,1,0,21,2,0,73,73,105,105,2,0,70,70,102,102,2,0,87,87,
		119,119,2,0,72,72,104,104,2,0,76,76,108,108,2,0,69,69,101,101,2,0,68,68,
		100,100,2,0,79,79,111,111,2,0,82,82,114,114,2,0,85,85,117,117,2,0,78,78,
		110,110,2,0,67,67,99,99,2,0,84,84,116,116,2,0,83,83,115,115,2,0,65,65,
		97,97,1,0,34,34,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
		97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,269,0,1,1,0,0,0,0,3,1,0,0,
		0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
		0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
		0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
		1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
		0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
		0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
		1,0,0,0,1,83,1,0,0,0,3,85,1,0,0,0,5,87,1,0,0,0,7,94,1,0,0,0,9,100,1,0,
		0,0,11,102,1,0,0,0,13,104,1,0,0,0,15,110,1,0,0,0,17,114,1,0,0,0,19,116,
		1,0,0,0,21,118,1,0,0,0,23,120,1,0,0,0,25,122,1,0,0,0,27,124,1,0,0,0,29,
		126,1,0,0,0,31,129,1,0,0,0,33,132,1,0,0,0,35,134,1,0,0,0,37,137,1,0,0,
		0,39,139,1,0,0,0,41,141,1,0,0,0,43,144,1,0,0,0,45,147,1,0,0,0,47,150,1,
		0,0,0,49,155,1,0,0,0,51,161,1,0,0,0,53,164,1,0,0,0,55,170,1,0,0,0,57,173,
		1,0,0,0,59,177,1,0,0,0,61,186,1,0,0,0,63,193,1,0,0,0,65,198,1,0,0,0,67,
		203,1,0,0,0,69,209,1,0,0,0,71,214,1,0,0,0,73,223,1,0,0,0,75,226,1,0,0,
		0,77,238,1,0,0,0,79,245,1,0,0,0,81,257,1,0,0,0,83,84,5,123,0,0,84,2,1,
		0,0,0,85,86,5,125,0,0,86,4,1,0,0,0,87,88,5,110,0,0,88,89,5,117,0,0,89,
		90,5,109,0,0,90,91,5,101,0,0,91,92,5,114,0,0,92,93,5,111,0,0,93,6,1,0,
		0,0,94,95,5,116,0,0,95,96,5,101,0,0,96,97,5,120,0,0,97,98,5,116,0,0,98,
		99,5,111,0,0,99,8,1,0,0,0,100,101,5,40,0,0,101,10,1,0,0,0,102,103,5,41,
		0,0,103,12,1,0,0,0,104,105,5,83,0,0,105,106,5,84,0,0,106,107,5,65,0,0,
		107,108,5,82,0,0,108,109,5,84,0,0,109,14,1,0,0,0,110,111,5,69,0,0,111,
		112,5,78,0,0,112,113,5,68,0,0,113,16,1,0,0,0,114,115,5,61,0,0,115,18,1,
		0,0,0,116,117,5,44,0,0,117,20,1,0,0,0,118,119,5,43,0,0,119,22,1,0,0,0,
		120,121,5,45,0,0,121,24,1,0,0,0,122,123,5,42,0,0,123,26,1,0,0,0,124,125,
		5,47,0,0,125,28,1,0,0,0,126,127,5,38,0,0,127,128,5,38,0,0,128,30,1,0,0,
		0,129,130,5,124,0,0,130,131,5,124,0,0,131,32,1,0,0,0,132,133,5,33,0,0,
		133,34,1,0,0,0,134,135,5,61,0,0,135,136,5,61,0,0,136,36,1,0,0,0,137,138,
		5,60,0,0,138,38,1,0,0,0,139,140,5,62,0,0,140,40,1,0,0,0,141,142,5,60,0,
		0,142,143,5,61,0,0,143,42,1,0,0,0,144,145,5,62,0,0,145,146,5,61,0,0,146,
		44,1,0,0,0,147,148,5,33,0,0,148,149,5,61,0,0,149,46,1,0,0,0,150,151,5,
		116,0,0,151,152,5,114,0,0,152,153,5,117,0,0,153,154,5,101,0,0,154,48,1,
		0,0,0,155,156,5,102,0,0,156,157,5,97,0,0,157,158,5,108,0,0,158,159,5,115,
		0,0,159,160,5,101,0,0,160,50,1,0,0,0,161,162,7,0,0,0,162,163,7,1,0,0,163,
		52,1,0,0,0,164,165,7,2,0,0,165,166,7,3,0,0,166,167,7,0,0,0,167,168,7,4,
		0,0,168,169,7,5,0,0,169,54,1,0,0,0,170,171,7,6,0,0,171,172,7,7,0,0,172,
		56,1,0,0,0,173,174,7,1,0,0,174,175,7,7,0,0,175,176,7,8,0,0,176,58,1,0,
		0,0,177,178,7,1,0,0,178,179,7,9,0,0,179,180,7,10,0,0,180,181,7,11,0,0,
		181,182,7,12,0,0,182,183,7,0,0,0,183,184,7,7,0,0,184,185,7,10,0,0,185,
		60,1,0,0,0,186,187,7,8,0,0,187,188,7,5,0,0,188,189,7,12,0,0,189,190,7,
		9,0,0,190,191,7,8,0,0,191,192,7,10,0,0,192,62,1,0,0,0,193,194,7,12,0,0,
		194,195,7,3,0,0,195,196,7,5,0,0,196,197,7,10,0,0,197,64,1,0,0,0,198,199,
		7,5,0,0,199,200,7,4,0,0,200,201,7,13,0,0,201,202,7,5,0,0,202,66,1,0,0,
		0,203,204,7,2,0,0,204,205,7,8,0,0,205,206,7,0,0,0,206,207,7,12,0,0,207,
		208,7,5,0,0,208,68,1,0,0,0,209,210,7,8,0,0,210,211,7,5,0,0,211,212,7,14,
		0,0,212,213,7,6,0,0,213,70,1,0,0,0,214,218,5,34,0,0,215,217,8,15,0,0,216,
		215,1,0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,221,1,
		0,0,0,220,218,1,0,0,0,221,222,5,34,0,0,222,72,1,0,0,0,223,224,5,59,0,0,
		224,74,1,0,0,0,225,227,7,16,0,0,226,225,1,0,0,0,227,228,1,0,0,0,228,226,
		1,0,0,0,228,229,1,0,0,0,229,236,1,0,0,0,230,232,9,0,0,0,231,233,7,16,0,
		0,232,231,1,0,0,0,233,234,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,
		237,1,0,0,0,236,230,1,0,0,0,236,237,1,0,0,0,237,76,1,0,0,0,238,242,7,17,
		0,0,239,241,7,18,0,0,240,239,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,
		243,1,0,0,0,243,78,1,0,0,0,244,242,1,0,0,0,245,246,5,47,0,0,246,247,5,
		47,0,0,247,251,1,0,0,0,248,250,8,19,0,0,249,248,1,0,0,0,250,253,1,0,0,
		0,251,249,1,0,0,0,251,252,1,0,0,0,252,254,1,0,0,0,253,251,1,0,0,0,254,
		255,6,39,0,0,255,80,1,0,0,0,256,258,7,20,0,0,257,256,1,0,0,0,258,259,1,
		0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,261,1,0,0,0,261,262,6,40,0,0,
		262,82,1,0,0,0,8,0,218,228,234,236,242,251,259,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
